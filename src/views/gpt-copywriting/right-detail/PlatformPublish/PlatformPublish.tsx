// MUI Imports
import React from "react";

import {
  Button,
  Dialog,
  DialogTitle,
  Typography,
  IconButton,
} from "@mui/material";
import { CloseOutlined } from "@mui/icons-material";

// React Imports

// Components Imports
import { StoreList } from "./StoreList";
import { StepContext } from "./StepContext";
import { PlatformStep } from "./PlatformStep";

// Query Imports
import type { Res } from "@/api/api-nlp/gpt_task";
import type { Row } from "@/api/api-stg/connection_my_connections";

export function PlatformPublish(props: PlatformPublishProps) {
  // ** Props
  const { data } = props;

  const [step, setStep] = React.useState(0);
  const [open, setOpen] = React.useState(false);
  const [store, setStore] = React.useState<Row | null>(null);

  const handleClose = () => {
    setOpen(false);
    setStep(0);
  };

  const handleOpen = () => {
    setOpen(true);
  };

  // Task is not generated by SEO tab
  if (data.output.role_no !== 2) {
    return <></>;
  }

  const stepMainNode = (() => {
    switch (step) {
      case 0:
        return <StoreList />;
      case 1:
      case 2:
        return <PlatformStep key={store?.connection_id} />;
      default:
        return null;
    }
  })();

  // Normal content
  return (
    <StepContext.Provider
      value={{ step, setStep, store, setStore, data, open, setOpen }}
    >
      <Button onClick={handleOpen}>publish</Button>
      <Dialog open={open} onClose={handleClose} fullScreen>
        <DialogTitle
          align="center"
          component={"div"}
          sx={{ position: "relative" }}
        >
          <IconButton
            onClick={handleClose}
            sx={{ position: "absolute", top: ".75rem", right: ".75rem" }}
          >
            <CloseOutlined />
          </IconButton>

          {/* Header */}
          <Typography variant="h5">Create Post</Typography>
          <Typography variant="subtitle2" mt={2}>
            Provide data with this form to create your post.
          </Typography>
        </DialogTitle>

        {stepMainNode}
      </Dialog>
    </StepContext.Provider>
  );
}

export interface PlatformPublishProps {
  data: Res;
}
